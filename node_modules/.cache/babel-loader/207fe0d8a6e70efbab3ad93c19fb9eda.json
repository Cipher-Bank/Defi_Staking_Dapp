{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non ethereum browser detected. You should consider Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdTokenData, rwd, rwdTokenBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                console.log(networkId, 'Network ID'); //LOAD Tether TOKEN\n\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert(\"tether contract not deployed to detect network\");\n\n              case 20:\n                //LOAD RWD TOKEN\n                rwdTokenData = RWD.networks[networkId];\n\n                if (!rwdTokenData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdTokenData.address);\n                this.setState({\n                  RWD: RWD\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdTokenBalance = _context3.sent;\n                this.setState({\n                  rwdTokenBalance: rwdTokenBalance.toString()\n                });\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert(\"Reward Token contract not deployed to detect network\");\n\n              case 31:\n                //Load DecentralBank\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 41;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 37;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context3.next = 42;\n                break;\n\n              case 41:\n                window.alert(\"TokenForm contract not deployed to detect network\");\n\n              case 42:\n                this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdTokenBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, console.this.state.loading));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:/Defi-Staking/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","console","log","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdTokenData","rwd","rwdTokenBalance","decentralBankData","decentralBank","stakingBalance","loading","props","this"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Navbar from './Navbar'\r\nimport Web3 from 'web3'\r\nimport Tether from '../truffle_abis/Tether.json'\r\nimport RWD from '../truffle_abis/RWD.json'\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\r\n\r\n\r\nclass App extends Component {\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n        \r\n      }\r\n\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else {\r\n          window.alert('Non ethereum browser detected. You should consider Metamask!')\r\n        }\r\n      }\r\n\r\n      async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const account= await web3.eth.getAccounts()\r\n        \r\n        this.setState({account: account[0]})\r\n        const networkId = await web3.eth.net.getId()\r\n        console.log(networkId,'Network ID')\r\n\r\n         //LOAD Tether TOKEN\r\n    const tetherData = Tether.networks[networkId]\r\n    if(tetherData) {\r\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n      this.setState({tether})\r\n      let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n      this.setState({ tetherBalance: tetherBalance.toString()})\r\n      \r\n    } else {\r\n      window.alert(\"tether contract not deployed to detect network\")\r\n\r\n    }\r\n     //LOAD RWD TOKEN\r\n     const rwdTokenData = RWD.networks[networkId]\r\n     if(rwdTokenData) {\r\n       const rwd = new web3.eth.Contract(RWD.abi, rwdTokenData.address)\r\n       this.setState({RWD})\r\n       let rwdTokenBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n       this.setState({ rwdTokenBalance: rwdTokenBalance.toString()})\r\n       \r\n     } else {\r\n       window.alert(\"Reward Token contract not deployed to detect network\")\r\n     }\r\n     //Load DecentralBank\r\n     const decentralBankData = DecentralBank.networks[networkId]\r\n     if(decentralBankData) {\r\n       const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n       this.setState({decentralBank})\r\n       let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n       this.setState({ stakingBalance: stakingBalance.toString()})\r\n       \r\n     } else {\r\n       window.alert(\"TokenForm contract not deployed to detect network\")\r\n     }\r\n\r\n     this.setState({loading: false})\r\n        \r\n      }\r\n\r\n      constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          account: '0x0',\r\n          tether: {},\r\n          rwd: {},\r\n          decentralBank: {},\r\n          tetherBalance: '0',\r\n          rwdTokenBalance: '0',\r\n          stakingBalance: '0',\r\n          loading: true\r\n        }\r\n      }\r\n    \r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <Navbar account={this.state.account}/>\r\n            \r\n                <h1>\r\n                  {console.this.state.loading}\r\n                </h1>\r\n        </div>\r\n           \r\n        )\r\n    }\r\n\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}