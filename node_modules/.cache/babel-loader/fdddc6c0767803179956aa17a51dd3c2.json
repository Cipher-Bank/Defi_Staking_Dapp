{"ast":null,"code":"import _objectSpread from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Defi-Staking\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\Airdrop.js\";\n\nimport React, { useState, useEffect } from \"react\";\n\nvar Airdrop = function Airdrop(props) {\n  console.log(\"props in Airdrop\", props);\n\n  var _useState = useState({\n    time: {}\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      timeState = _useState2[0],\n      setTimeState = _useState2[1];\n\n  var _useState3 = useState(10),\n      _useState4 = _slicedToArray(_useState3, 2),\n      airdropTime = _useState4[0],\n      setAirdropTime = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      timer = _useState6[0],\n      setTimer = _useState6[1];\n\n  useEffect(function () {\n    var timeLeftVar = secondsToTime(airdropTime);\n    console.log(\"timelfetvar\", timeLeftVar);\n    setTimeState(function (prevState) {\n      return _objectSpread({}, prevState, {\n        time: timeLeftVar\n      });\n    });\n\n    if (airdropTime === 0) {\n      console.log(\"airdrip time iszero\");\n      clearInterval(timer);\n    }\n  }, [airdropTime]); // this will start the timer\n\n  var airdropReleaseTokens = function airdropReleaseTokens() {\n    var stakingB = props.stakingBalance;\n\n    if (stakingB >= \"50000000000000000000\") {\n      startTimer();\n    }\n  }; // each secon state count down will be called and state will be updated\n\n\n  var startTimer = function startTimer() {\n    if (timer === 0 && airdropTime > 0) {\n      setTimer(setInterval(countDown, 1000));\n    }\n  };\n\n  var countDown = function countDown() {\n    setTimeState(function (prevState) {\n      return _objectSpread({}, prevState, {\n        time: secondsToTime(airdropTime)\n      });\n    });\n    setAirdropTime(function (prevState) {\n      return prevState - 1;\n    });\n  };\n\n  var secondsToTime = function secondsToTime(secs) {\n    var hours, minutes, seconds;\n    hours = Math.floor(secs / (60 * 60));\n    var divisor_for_minutes = secs % (60 * 60);\n    minutes = Math.floor(divisor_for_minutes / 60);\n    var divisor_for_seconds = divisor_for_minutes % 60;\n    seconds = Math.ceil(divisor_for_seconds);\n    var obj = {\n      h: hours,\n      m: minutes,\n      s: seconds\n    };\n    return obj;\n  };\n\n  airdropReleaseTokens();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"black\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, timeState.time.m, \":\", timeState.time.s);\n};\n\nexport default Airdrop;","map":{"version":3,"sources":["D:/Defi-Staking/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js"],"names":["React","useState","useEffect","Airdrop","props","console","log","time","timeState","setTimeState","airdropTime","setAirdropTime","timer","setTimer","timeLeftVar","secondsToTime","prevState","clearInterval","airdropReleaseTokens","stakingB","stakingBalance","startTimer","setInterval","countDown","secs","hours","minutes","seconds","Math","floor","divisor_for_minutes","divisor_for_seconds","ceil","obj","h","m","s","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Airdrop = (props) => {\r\n  console.log(\"props in Airdrop\", props);\r\n  const [timeState, setTimeState] = useState({ time: {} });\r\n  const [airdropTime, setAirdropTime] = useState(10);\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let timeLeftVar = secondsToTime(airdropTime);\r\n    console.log(\"timelfetvar\", timeLeftVar);\r\n    setTimeState((prevState) => ({ ...prevState, time: timeLeftVar }));\r\n    if (airdropTime === 0) {\r\n      console.log(\"airdrip time iszero\");\r\n      clearInterval(timer);\r\n    }\r\n  }, [airdropTime]);\r\n\r\n  // this will start the timer\r\n  const airdropReleaseTokens = () => {\r\n    let stakingB = props.stakingBalance;\r\n    if (stakingB >= \"50000000000000000000\") {\r\n      startTimer();\r\n    }\r\n  };\r\n  // each secon state count down will be called and state will be updated\r\n  const startTimer = () => {\r\n    if (timer === 0 && airdropTime > 0) {\r\n      setTimer(setInterval(countDown, 1000));\r\n    }\r\n  };\r\n\r\n  const countDown = () => {\r\n    setTimeState((prevState) => ({\r\n      ...prevState,\r\n      time: secondsToTime(airdropTime),\r\n    }));\r\n\r\n    setAirdropTime((prevState) => prevState - 1);\r\n  };\r\n\r\n  const secondsToTime = (secs) => {\r\n    let hours, minutes, seconds;\r\n    hours = Math.floor(secs / (60 * 60));\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    minutes = Math.floor(divisor_for_minutes / 60);\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    seconds = Math.ceil(divisor_for_seconds);\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  };\r\n\r\n  airdropReleaseTokens();\r\n\r\n  return (\r\n    <div style={{ color: \"black\" }}>\r\n      {timeState.time.m}:{timeState.time.s}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}